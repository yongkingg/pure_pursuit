// Generated by gencpp from file testDrive/carInfo.msg
// DO NOT EDIT!


#ifndef TESTDRIVE_MESSAGE_CARINFO_H
#define TESTDRIVE_MESSAGE_CARINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace testDrive
{
template <class ContainerAllocator>
struct carInfo_
{
  typedef carInfo_<ContainerAllocator> Type;

  carInfo_()
    : mode()
    , enu_east(0.0)
    , enu_north(0.0)
    , enu_up(0.0)
    , yaw(0.0)
    , utm_x(0.0)
    , utm_y(0.0)
    , heading(0.0)  {
    }
  carInfo_(const ContainerAllocator& _alloc)
    : mode(_alloc)
    , enu_east(0.0)
    , enu_north(0.0)
    , enu_up(0.0)
    , yaw(0.0)
    , utm_x(0.0)
    , utm_y(0.0)
    , heading(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _mode_type;
  _mode_type mode;

   typedef double _enu_east_type;
  _enu_east_type enu_east;

   typedef double _enu_north_type;
  _enu_north_type enu_north;

   typedef double _enu_up_type;
  _enu_up_type enu_up;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _utm_x_type;
  _utm_x_type utm_x;

   typedef double _utm_y_type;
  _utm_y_type utm_y;

   typedef double _heading_type;
  _heading_type heading;





  typedef boost::shared_ptr< ::testDrive::carInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::testDrive::carInfo_<ContainerAllocator> const> ConstPtr;

}; // struct carInfo_

typedef ::testDrive::carInfo_<std::allocator<void> > carInfo;

typedef boost::shared_ptr< ::testDrive::carInfo > carInfoPtr;
typedef boost::shared_ptr< ::testDrive::carInfo const> carInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::testDrive::carInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::testDrive::carInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::testDrive::carInfo_<ContainerAllocator1> & lhs, const ::testDrive::carInfo_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.enu_east == rhs.enu_east &&
    lhs.enu_north == rhs.enu_north &&
    lhs.enu_up == rhs.enu_up &&
    lhs.yaw == rhs.yaw &&
    lhs.utm_x == rhs.utm_x &&
    lhs.utm_y == rhs.utm_y &&
    lhs.heading == rhs.heading;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::testDrive::carInfo_<ContainerAllocator1> & lhs, const ::testDrive::carInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace testDrive

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::testDrive::carInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::testDrive::carInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::testDrive::carInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::testDrive::carInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::testDrive::carInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::testDrive::carInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::testDrive::carInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e597445d8085e6b97cea6f509d947ddb";
  }

  static const char* value(const ::testDrive::carInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe597445d8085e6b9ULL;
  static const uint64_t static_value2 = 0x7cea6f509d947ddbULL;
};

template<class ContainerAllocator>
struct DataType< ::testDrive::carInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "testDrive/carInfo";
  }

  static const char* value(const ::testDrive::carInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::testDrive::carInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 모드\n"
"string mode  # 사용할 좌표계: \"ENU\" 또는 \"UTM\"\n"
"\n"
"# ENU 좌표계\n"
"float64 enu_east\n"
"float64 enu_north\n"
"float64 enu_up\n"
"float64 yaw\n"
"\n"
"# WGS84 좌표계\n"
"float64 utm_x\n"
"float64 utm_y\n"
"float64 heading\n"
"\n"
;
  }

  static const char* value(const ::testDrive::carInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::testDrive::carInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.enu_east);
      stream.next(m.enu_north);
      stream.next(m.enu_up);
      stream.next(m.yaw);
      stream.next(m.utm_x);
      stream.next(m.utm_y);
      stream.next(m.heading);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct carInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::testDrive::carInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::testDrive::carInfo_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.mode);
    s << indent << "enu_east: ";
    Printer<double>::stream(s, indent + "  ", v.enu_east);
    s << indent << "enu_north: ";
    Printer<double>::stream(s, indent + "  ", v.enu_north);
    s << indent << "enu_up: ";
    Printer<double>::stream(s, indent + "  ", v.enu_up);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "utm_x: ";
    Printer<double>::stream(s, indent + "  ", v.utm_x);
    s << indent << "utm_y: ";
    Printer<double>::stream(s, indent + "  ", v.utm_y);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TESTDRIVE_MESSAGE_CARINFO_H
